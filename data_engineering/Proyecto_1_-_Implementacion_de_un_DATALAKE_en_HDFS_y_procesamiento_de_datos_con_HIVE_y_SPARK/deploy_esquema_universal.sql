-- 
-- @author Alfonso Perez
-- @email perezlino@gmail.com
-- @copyright Alfonso Perez
--
-- Despliegue del esquema "UNIVERSAL"
-- 

-- 
-- @section Tuning
-- 

-- SET hive.execution.engine=mr;
-- SET mapreduce.job.maps=8;
-- SET mapreduce.input.fileinputformat.split.maxsize=128000000;
-- SET mapreduce.input.fileinputformat.split.minsize=128000000;
-- SET mapreduce.map.cpu.vcores=2;
-- SET mapreduce.map.memory.mb=128;
-- SET mapreduce.job.reduces=8;
-- SET mapreduce.reduce.cpu.vcores=2;
-- SET mapreduce.reduce.memory.mb=128;
-- SET hive.exec.dynamic.partition=true;
SET hive.exec.dynamic.partition.mode=nonstrict;
SET hive.exec.max.dynamic.partitions=9999;
SET hive.exec.max.dynamic.partitions.pernode=9999;
SET hive.exec.compress.output=true;
SET parquet.compression=SNAPPY;
-- SET orc.compression=SNAPPY;
-- SET avro.output.codec=SNAPPY;
-- SET mapreduce.job.queue.name=q_user_main;
-- SET spark.job.queue.name=q_user_main;
-- SET tez.job.queue.name=q_user_main;

--
-- @section Programa
--

-- Borrado de la base de datos
DROP DATABASE IF EXISTS UNIVERSAL CASCADE;

-- Creación de la base de datos
-- en LOCATION podemos indicar solo la ruta: "/user/..." o anteponer el "hdfs:///user/..."
CREATE DATABASE IF NOT EXISTS UNIVERSAL 
LOCATION '/user/${hiveconf:PARAM_RAIZ}/${hiveconf:PARAM_PROYECTO}/database/universal';

--
-- Tabla Persona
--

-- Creación de la tabla
-- en LOCATION podemos indicar solo la ruta: "/user/..." o anteponer el "hdfs:///user/..."
CREATE TABLE UNIVERSAL.PERSONA(
ID STRING,
NOMBRE STRING,
TELEFONO STRING,
CORREO STRING,
FECHA_INGRESO STRING,
EDAD INT,
SALARIO DOUBLE,
ID_EMPRESA STRING
)
STORED AS PARQUET
LOCATION '/user/${hiveconf:PARAM_RAIZ}/${hiveconf:PARAM_PROYECTO}/database/universal/persona'
TBLPROPERTIES ("parquet.compression"="SNAPPY");

-- Inserción de datos
INSERT OVERWRITE TABLE UNIVERSAL.PERSONA
SELECT
  cast(ID AS STRING),
  cast(NOMBRE AS STRING),
  cast(TELEFONO AS STRING),
  cast(CORREO AS STRING),
  cast(FECHA_INGRESO AS STRING),
  cast(EDAD AS INT),
  cast(SALARIO AS DOUBLE),
  cast(ID_EMPRESA AS STRING)
FROM 
  LANDING.PERSONA
WHERE 
  ID != 'ID';

-- Impresión de datos
SELECT * FROM UNIVERSAL.PERSONA LIMIT 10;

--
-- Tabla Empresa
--

-- Creación de tabla
-- en LOCATION podemos indicar solo la ruta: "/user/..." o anteponer el "hdfs:///user/..."
CREATE TABLE UNIVERSAL.EMPRESA(
ID STRING,
NOMBRE STRING
)
STORED AS PARQUET
LOCATION '/user/${hiveconf:PARAM_RAIZ}/${hiveconf:PARAM_PROYECTO}/database/universal/empresa'
TBLPROPERTIES ("parquet.compression"="SNAPPY");

-- Inserción de datos
INSERT OVERWRITE TABLE UNIVERSAL.EMPRESA
SELECT
  cast(ID AS STRING),
  cast(NOMBRE AS STRING)
FROM 
  LANDING.EMPRESA
WHERE 
  ID != 'ID';

-- Impresión de datos
SELECT * FROM UNIVERSAL.EMPRESA LIMIT 10;

--
-- Tabla Transaccion
--

-- Creación de tabla
-- en LOCATION podemos indicar solo la ruta: "/user/..." o anteponer el "hdfs:///user/..."
CREATE TABLE UNIVERSAL.TRANSACCION(
ID_PERSONA STRING,
ID_EMPRESA STRING,
MONTO DOUBLE
)
PARTITIONED BY (FECHA STRING)
STORED AS PARQUET
LOCATION '/user/${hiveconf:PARAM_RAIZ}/${hiveconf:PARAM_PROYECTO}/database/universal/transaccion'
TBLPROPERTIES ("parquet.compression"="SNAPPY");

-- Inserción de datos
INSERT OVERWRITE TABLE UNIVERSAL.TRANSACCION
PARTITION(FECHA)
SELECT
  cast(ID_PERSONA AS STRING),
  cast(ID_EMPRESA AS STRING),
  cast(MONTO AS DOUBLE),
  cast(FECHA AS STRING)
FROM 
  LANDING.TRANSACCION
WHERE 
  ID_PERSONA != 'ID_PERSONA'; 

-- Impresión de datos
SELECT * FROM UNIVERSAL.TRANSACCION LIMIT 10;

--
-- Tabla Transaccion_Enriquecida
--

-- Creación de tabla
-- en LOCATION podemos indicar solo la ruta: "/user/..." o anteponer el "hdfs:///user/..."
CREATE TABLE UNIVERSAL.TRANSACCION_ENRIQUECIDA(
ID_PERSONA INT,
NOMBRE_PERSONA STRING,
EDAD_PERSONA INT,
SALARIO_PERSONA DOUBLE,
TRABAJO_PERSONA STRING,
MONTO_TRANSACCION DOUBLE,
EMPRESA_TRANSACCION STRING
)
PARTITIONED BY (FECHA_TRANSACCION STRING)
STORED AS PARQUET
LOCATION '/user/${hiveconf:PARAM_RAIZ}/${hiveconf:PARAM_PROYECTO}/database/universal/transaccion_enriquecida'
TBLPROPERTIES ("parquet.compression"="SNAPPY");

--
-- Tabla Transaccion_Persona_Enriquecida_1
--

-- Creación de tabla
CREATE TEMPORARY TABLE UNIVERSAL.TRANSACCION_PERSONA_ENRIQUECIDA_1(
ID_PERSONA STRING,
NOMBRE_PERSONA STRING,
EDAD_PERSONA INT,                                -- No es necesario COMPRIMIR una Tabla temporal
SALARIO_PERSONA DOUBLE,                          -- Como tampoco indicar el LOCATION
ID_EMPRESA_PERSONA STRING,
MONTO_TRANSACCION DOUBLE,
FECHA_TRANSACCION STRING,
ID_EMPRESA_TRANSACCION STRING
)
STORED AS PARQUET;

-- Inserción de datos
INSERT INTO UNIVERSAL.TRANSACCION_PERSONA_ENRIQUECIDA_1
SELECT
  T.ID_PERSONA AS ID_PERSONA,
  P.NOMBRE AS NOMBRE_PERSONA,
  P.EDAD AS EDAD_PERSONA,
  P.SALARIO AS SALARIO_PERSONA,
  P.ID_EMPRESA AS ID_EMPRESA_PERSONA,
  T.MONTO AS MONTO_TRANSACCION,
  T.FECHA AS FECHA_TRANSACCION,
  T.ID_EMPRESA AS ID_EMPRESA_TRANSACCION
FROM
  UNIVERSAL.TRANSACCION T
JOIN 
  UNIVERSAL.PERSONA P
ON 
  T.ID_PERSONA = P.ID;

-- Impresión de datos
SELECT * FROM UNIVERSAL.TRANSACCION_PERSONA_ENRIQUECIDA_1 LIMIT 10;

--
-- Tabla Transaccion_Persona_Enriquecida_2
--

-- Creación de tabla
CREATE TEMPORARY TABLE UNIVERSAL.TRANSACCION_PERSONA_ENRIQUECIDA_2(
ID_PERSONA STRING,
NOMBRE_PERSONA STRING,
EDAD_PERSONA INT,
SALARIO_PERSONA DOUBLE,
TRABAJO_PERSONA STRING,
MONTO_TRANSACCION DOUBLE,
FECHA_TRANSACCION STRING,
ID_EMPRESA_TRANSACCION STRING
)
STORED AS PARQUET;

-- Inserción de datos
INSERT INTO UNIVERSAL.TRANSACCION_PERSONA_ENRIQUECIDA_2
SELECT
  T.ID_PERSONA AS ID_PERSONA,
  T.NOMBRE_PERSONA AS NOMBRE_PERSONA,
  T.EDAD_PERSONA AS EDAD_PERSONA,
  T.SALARIO_PERSONA AS SALARIO_PERSONA,
  E.NOMBRE AS TRABAJO_PERSONA,
  T.MONTO_TRANSACCION AS MONTO_TRANSACCION,
  T.FECHA_TRANSACCION AS FECHA_TRANSACCION,
  T.ID_EMPRESA_TRANSACCION AS ID_EMPRESA_TRANSACCION
FROM
  UNIVERSAL.TRANSACCION_PERSONA_ENRIQUECIDA_1 T
JOIN 
  UNIVERSAL.EMPRESA E
ON 
  T.ID_EMPRESA_PERSONA = E.ID;

-- Impresión de datos
SELECT * FROM UNIVERSAL.TRANSACCION_PERSONA_ENRIQUECIDA_2 LIMIT 10;

--
-- Tabla Transaccion_Persona_Empresa_Enriquecida
--

-- Creación de tabla
CREATE TEMPORARY TABLE UNIVERSAL.TRANSACCION_PERSONA_EMPRESA_ENRIQUECIDA(
ID_PERSONA STRING,
NOMBRE_PERSONA STRING,
EDAD_PERSONA INT,
SALARIO_PERSONA DOUBLE,
TRABAJO_PERSONA STRING,
MONTO_TRANSACCION DOUBLE,
FECHA_TRANSACCION STRING,
EMPRESA_TRANSACCION STRING
)
STORED AS PARQUET;

-- Inserción de datos
INSERT INTO UNIVERSAL.TRANSACCION_PERSONA_EMPRESA_ENRIQUECIDA
SELECT
  T.ID_PERSONA AS ID_PERSONA,
  T.NOMBRE_PERSONA AS NOMBRE_PERSONA,
  T.EDAD_PERSONA AS EDAD_PERSONA,
  T.SALARIO_PERSONA AS SALARIO_PERSONA,
  T.TRABAJO_PERSONA AS TRABAJO_PERSONA,
  T.MONTO_TRANSACCION AS MONTO_TRANSACCION,
  T.FECHA_TRANSACCION AS FECHA_TRANSACCION,
  E.NOMBRE AS EMPRESA_TRANSACCION
FROM
  UNIVERSAL.TRANSACCION_PERSONA_ENRIQUECIDA_2 T
JOIN 
  UNIVERSAL.EMPRESA E
ON 
  T.ID_EMPRESA_TRANSACCION = E.ID;

-- Impresión de datos
SELECT * FROM UNIVERSAL.TRANSACCION_PERSONA_EMPRESA_ENRIQUECIDA LIMIT 10;

--
-- Tabla Transaccion_Enriquecida
--

-- Inserción de datos
INSERT OVERWRITE TABLE UNIVERSAL.TRANSACCION_ENRIQUECIDA
PARTITION (FECHA_TRANSACCION)
SELECT
  ID_PERSONA,
  NOMBRE_PERSONA,
  EDAD_PERSONA,
  SALARIO_PERSONA,
  TRABAJO_PERSONA,
  MONTO_TRANSACCION,
  EMPRESA_TRANSACCION,
  FECHA_TRANSACCION
FROM
  UNIVERSAL.TRANSACCION_PERSONA_EMPRESA_ENRIQUECIDA;

-- Impresión de datos
SELECT * FROM UNIVERSAL.TRANSACCION_ENRIQUECIDA LIMIT 10;

--
-- Borrar tablas temporales
--

DROP TABLE IF EXISTS UNIVERSAL.TRANSACCION_PERSONA_ENRIQUECIDA_1;
DROP TABLE IF EXISTS UNIVERSAL.TRANSACCION_PERSONA_ENRIQUECIDA_2;
DROP TABLE IF EXISTS UNIVERSAL.TRANSACCION_PERSONA_EMPRESA_ENRIQUECIDA;